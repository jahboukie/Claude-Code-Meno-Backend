rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // User consent collection
    match /user_consents/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // *** OUR BATTLE-TESTED JOURNAL ENTRIES RULE ***
    match /journal_entries/{entryId} {
      allow create, update, delete: if isAuthenticated() && isOwner(request.resource.data.userId);

      // Allow reading if the user is the owner OR the verified partner of a SHARED entry.
      allow read: if isAuthenticated() &&
        (
          isOwner(resource.data.userId) ||
          (
            resource.data.isShared == true &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partnerId == resource.data.userId
          )
        );
    }

    // Invites collection
    match /invites/{inviteCode} {
      allow read, create: if isAuthenticated() && isOwner(request.resource.data.fromUserId);
      allow update: if isAuthenticated(); // For the acceptPartnerInvite function
    }

    // Audit logs collection (write-only from client)
    match /audit_logs/{logId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false;
    }

    // Data Retention collection
    match /data_retention/{userId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
}
